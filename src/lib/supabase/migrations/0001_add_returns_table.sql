-- Crear la tabla de devoluciones
CREATE TABLE IF NOT EXISTS public.devoluciones (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    producto_id bigint NOT NULL,
    cantidad integer NOT NULL,
    motivo text NOT NULL,
    monto_devolucion numeric NOT NULL,
    cajero_id bigint NOT NULL,
    fecha_devolucion timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT devoluciones_pkey PRIMARY KEY (id),
    CONSTRAINT devoluciones_cajero_id_fkey FOREIGN KEY (cajero_id) REFERENCES public.cajeros(id),
    CONSTRAINT devoluciones_producto_id_fkey FOREIGN KEY (producto_id) REFERENCES public.productos(id)
);

-- Habilitar Row Level Security (RLS) para la nueva tabla
ALTER TABLE IF EXISTS public.devoluciones
    ENABLE ROW LEVEL SECURITY;

-- Crear pol√≠ticas para permitir el acceso
-- Permite a los usuarios autenticados insertar sus propias devoluciones
CREATE POLICY "authenticated_can_insert_return"
    ON public.devoluciones
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

-- Permite a los administradores ver todas las devoluciones
CREATE POLICY "admin_can_read_all_returns"
    ON public.devoluciones
    FOR SELECT
    USING ((SELECT rol FROM public.cajeros WHERE id = auth.uid()) = 'administrador');

-- Permite a los cajeros ver sus propias devoluciones (opcional, si es necesario)
-- CREATE POLICY "cajero_can_read_own_returns"
--     ON public.devoluciones
--     FOR SELECT
--     USING (cajero_id = auth.uid());
